@top Mapping { (statement? newline)* statement? }

@tokens {
  Pointer { "*" }
  Projector { "/" }
  Injector { "%" }
  OpenBrace[closedBy="CloseBrace"] { "{" }
  CloseBrace[openedBy="OpenBrace"] { "}" }
  OpenBracket[closedBy="CloseBracket"] { "[" }
  CloseBracket[openedBy="OpenBracket"] { "]" }
  OpenParen[closedBy="CloseParen"] { "(" }
  CloseParen[openedBy="OpenParen"] { ")" }
  LeftMap { "<=" }
  RightMap { "=>" }

  newline { "\n" }
  space { (" " | "\t")+ }
  Comment { "#" ![\n]* }
  identifier { std.asciiLetter (std.asciiLetter | std.digit)* }

  char { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  esc  { $["\\\/bfnrt] | "u" hexDig hexDig hexDig hexDig }

  hexDig { $[0-9A-Fa-f] }
  subDelims { $[!$&'()*+,;=] }
  unreserved { $[A-Za-z0-9\-._~] }
  pctEncoded { "%" hexDig hexDig }
  decOctet { "25" $[0-5] | "2" $[0-4] std.digit | $[01]? std.digit std.digit? }
  ipv4address { decOctet "." decOctet "." decOctet "." decOctet }
  h16 { hexDig (hexDig (hexDig hexDig?)?)? }
  ls32 { h16 ":" h16 | ipv4address }
  ipv6address {
                                                                                    h16 ":" h16 ":" h16 ":" h16 ":" h16 ":" h16 ":" ls32
    |                                                                          "::" h16 ":" h16 ":" h16 ":" h16 ":" h16 ":" ls32
    | h16?                                                                     "::" h16 ":" h16 ":" h16 ":" h16 ":" ls32
    | (h16 (":" h16)?)?                                                        "::" h16 ":" h16 ":" h16 ":" ls32
    | (h16 (":" h16 (":" h16)?)?)?                                             "::" h16 ":" h16 ":" ls32
    | (h16 (":" h16 (":" h16 (":" h16)?)?)?)?                                  "::" h16 ":" ls32
    | (h16 (":" h16 (":" h16 (":" h16 (":" h16)?)?)?)?)?                       "::" ls32
    | (h16 (":" h16 (":" h16 (":" h16 (":" h16 (":" h16)?)?)?)?)?)?            "::" h16
    | (h16 (":" h16 (":" h16 (":" h16 (":" h16 (":" h16 (":" h16)?)?)?)?)?)?)? "::"
  }
  ipvFuture { $[Vv] hexDig+ "." (unreserved | subDelims | ":")+ }
  ipLiteral { "[" (ipv6address | ipvFuture) "]" }
  regName { (unreserved | pctEncoded | subDelims)* }
  host { ipLiteral | ipv4address | regName }
  userinfo { (unreserved | pctEncoded | subDelims | ":")* }
  authority { (userinfo "@")? host (":" std.digit+)? }
  pchar { unreserved | pctEncoded | subDelims | ":" | "@" }
  scheme { std.asciiLetter $[A-Za-z0-9+\-.]* }

  uri { scheme ":" ("//" authority | "/"? pchar+) ("/" pchar*)* }

  component { pchar | "/" | "?" }
  term { identifier ":" component* pchar+ }

  Namespace { uri $[/?#] }

  URI { "<" uri ("?" component* )? ("#" component* )? ">" }
  Literal { '"' char* '"' }

  @precedence { term identifier }
  @precedence { URI Comment }
}

@skip { space | Comment }

delimited<element> { (newline element?)* newline }

Key { term }

Identifier { identifier }

Value { Identifier path* }

path[@isGroup=Path] { Projection | Dereference }

Projection { Projector Key }

Dereference { Pointer Key }

lambda { OpenParen Identifier CloseParen RightMap expression Injection* }

expression[@isGroup=Expression] {
  URI | Literal | Value | Construction | Match
}

Match { Value OpenBracket delimited<Case>? CloseBracket }
Case { Key lambda }

Construction { OpenBrace delimited<Slot>? CloseBrace }
Slot { Key LeftMap expression Injection* }

Injection { Injector Key }

keyword<word> { @specialize[@name={word}]<identifier, word> }

NamespaceDefinition { keyword<"namespace"> Prefix { identifier } Namespace }

MapDeclaration { keyword<"map"> Target { term } LeftMap Source { term } lambda }

statement { NamespaceDefinition | MapDeclaration }
